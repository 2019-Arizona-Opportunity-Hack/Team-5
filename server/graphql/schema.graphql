type Query {
    user(id: ID!): User
    event(id: ID!): Event
    findUsers(query: UserQuery): [User]
    findEvents(query: EventQuery): [Event]
}

type Mutation {
    newUser(user: UserInput!, household: [UserInput]): Success
    newEvent(event: EventInput!): Success
    addUserToEvent(userId: ID!, eventId: ID!): Success
    updateUser(userId: ID!, changes: UserInput): Success
    updateEvent(eventId: ID!, changes: EventInput!): Success
    deleteUser(userId: ID!): Success
    deleteEvent(eventId: ID): Success
}

scalar Date

type User {
    id: ID!
    firstName: String
    lastName: String
    dateOfBirth: Date
    address: String
    zipCode: Int
    city: String
    phoneNumber: String
    emailAddress: String
    isHeadOfHousehold: Boolean
    gender: String
    housingType: String
    ethnicity: String
    selfIdentification: [String]
    highestEducationCompleted: String
    primaryLanguage: [String]
    employmentType: String
    hasDentalInsurance: Boolean
    hasPrimaryDoctor: Boolean
    monthlyIncome: Float
    monthlyIncomeType: String
    medicalInsuranceType: String
    childCareType: String
    household: [User]
    eventsAttended: [Event]
}

input UserInput {
    firstName: String
    lastName: String
    dateOfBirth: Date
    address: String
    zipCode: Int
    city: String
    phoneNumber: String
    emailAddress: String
    gender: String
    housingType: String
    ethnicity: String
    selfIdentification: [String]
    highestEducationCompleted: String
    primaryLanguage: [String]
    employmentType: String
    hasDentalInsurance: Boolean
    hasPrimaryDoctor: Boolean
    monthlyIncome: Float
    monthlyIncomeType: String
    medicalInsuranceType: String
    childCareType: String
}

input UserQuery {
    firstName: StringQuery
    lastName: StringQuery
    dateOfBirth: DateQuery
    address: StringQuery
    zipCode: NumberQuery
    city: StringQuery
    phoneNumber: StringQuery
    emailAddress: StringQuery
    isHeadOfHousehold: BooleanQuery
    gender: StringQuery
    housingType: StringQuery
    ethnicity: StringQuery
    selfIdentification: StringQuery
    highestEducationCompleted: StringQuery
    primaryLanguage: StringQuery
    employmentType: StringQuery
    hasDentalInsurance: BooleanQuery
    hasPrimaryDoctor: BooleanQuery
    monthlyIncome: NumberQuery
    monthlyIncomeType: StringQuery
    medicalInsuranceType: StringQuery
    childCareType: StringQuery
}

type Event {
    id: ID!
    name: String
    usersAttended: [User]
    datetime: Date
}

input EventInput {
    name: String
    datetime: Date
}

input EventQuery {
    name: StringQuery
    datetime: DateQuery
}

type Success {
    success: Boolean
}

input StringQuery {
    exactMatch: String
}

input DateQuery {
    isBefore: Date
    isAfter: Date
}

input BooleanQuery {
    value: Boolean
}

input NumberQuery {
    greaterThen: Float
    lessThen: Float
}
